#!/usr/bin/env bash

#********************************
# Author: luis Sagastume
# Email: lsagastume1990@gmail.com
# File:  install
# Install dotfiles
#********************************

#Dotfiles
dotfiles=".vimrc .zshrc .bashrc .tmux.conf .pryrc .gemrc .gitconfig"

#*********************
# Valid args function
# Check valid dotfile
#*********************
function valid_arg()
{
    valid=1
    arg="$1"

    for file in $dotfiles; do
        if [ "$file" == "$arg" ]; then
            valid=0
            break
        fi
    done
    echo $valid
}

#************************************************
# vimrc setup function
# will configure vim and neovim vimrc
#************************************************
function vimrc_setup()
{
    [ "$XDG_CONFIG_HOME" == "" ] && XDG_CONFIG_HOME="$HOME/.config"
    if [ ! -e ~/.vim ]; then
         mkdir -p ~/.vim/bundle

         # Need git to install Vundle
         git_message=$(type git)
         if  echo $git_message | grep --invert-match -iq "not found"; then
             echo "Setting Vundle..."
             git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
         else
             echo "Can't complete vimrc configuration, install git to continue"
             exit 1
         fi
     fi

    [ ! -e "$XDG_CONFIG_HOME/nvim" ] && mkdir -p "$XDG_CONFIG_HOME/nvim"

    if [ "$#" -gt 0 ] && [ "$1" == "y" ]; then
        if [ -h "$XDG_CONFIG_HOME/nvim/init.vim" ]; then
            unlink "$XDG_CONFIG_HOME/nvim/init.vim"
        fi
    fi

    ln -s ~/.vimrc "$XDG_CONFIG_HOME/nvim/init.vim"
}

# Create directory to backup files
[ ! -d "$PWD/backups" ] && mkdir "$PWD/backups"

#************************************************
# Setup function
# will handle configuration and update of dotfiles
#************************************************
function setup()
{
    file="$1"

    # Check input
    is_valid=$(valid_arg "$file")
    if [ $is_valid -eq 1 ]; then
        echo "ERROR: Invalid dotfile \"$file\""
        help
    fi

    if [ ! -e ~/"$file" ]; then
        echo "Setting up $file"

        ln -s "$PWD/${file#.}" ~/"$file" # ${string#substring} remove substring from string
        [ "$file" == ".vimrc" ] && vimrc_setup
    else
        echo -n "$file file already exists, do you want to update it [y/n]: "
        read update
        if [ "$update" == "y" ]; then
            old_file="${file#.}-$(date +%m-%d-%Y:%c)"
            touch "$PWD/backups/$old_file"
            cp ~/"$file" "$PWD/backups/$old_file"; unlink ~/"$file"
            ln -s "$PWD/${file#.}" ~/"$file"
            [ "$file" == ".vimrc" ] && vimrc_setup $update

            echo "$file updated"
        fi
    fi
}

#**********************************
# Clean function
# Remove everything from backup dir
#**********************************
function clean()
{
    rm "$PWD/backups/*"
}

#****************************************
# Help function
# Display available args to setup program
#****************************************
function help()
{
    i=1
    echo "Setup a specific file passing one of the following arguents:"
    for file in $dotfiles; do
        echo "($i) $file"
        i=$((i+1))
    done
    exit 0
}

# Get input
arg=$1

# Run the setup
if [ $# -gt 0 ]; then
    if [ "$arg" == "--help" ]; then
        help
    elif [ "$arg" == "--clean" ]; then
        clean
    else
        setup $arg
    fi
else
    for file in $dotfiles; do
        setup $file
    done
fi
